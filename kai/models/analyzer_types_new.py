# generated by datamodel-codegen:
#   filename:  analyzer_types_new.yaml
#   timestamp: 2024-07-08T14:48:19+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Category(Enum):
    potential = "potential"
    optional = "optional"
    mandatory = "mandatory"


class Incident(BaseModel):
    uri: str
    message: str
    codeSnip: Optional[str] = None
    lineNumber: Optional[int] = None
    variables: Optional[Dict[str, Any]] = None


class Link(BaseModel):
    url: str
    title: Optional[str] = None


class Violation(BaseModel):
    description: Optional[str] = None
    category: Optional[Category] = None
    labels: Optional[List[str]] = None
    incidents: Optional[List[Incident]] = None
    links: Optional[List[Link]] = None
    extras: Optional[str] = None
    effort: Optional[int] = None


class RuleSet(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[float]] = None
    violations: Optional[Dict[str, Violation]] = None
    errors: Optional[Dict[str, str]] = None
    unmatched: Optional[List[str]] = None
    skipped: Optional[List[str]] = None


class AnalysisReport(BaseModel):
    __root__: List[RuleSet] = Field(..., title="AnalysisReport")
