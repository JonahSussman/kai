[
  {
    "name": "create_incident",
    "args": {
      "client_id": "a",
      "extended_incident": {
        "uri": "file://src/InventoryNotificationMDB.java",
        "message": "References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.",
        "ruleset_name": "default",
        "violation_name": "jms-to-smallrye-0001"
      }
    }
  },
  {
    "name": "create_solution",
    "args": {
      "client_id": "a",
      "incident_ids": [1],
      "before": [
        {
          "uri": "file://PriceChangeNotifierMDB.java",
          "content": "\nimport javax.ejb.MessageDriven;\nimport javax.ejb.ActivationConfigProperty;\nimport javax.inject.Inject;\nimport javax.jms.MessageListener;\nimport javax.jms.Message;\nimport javax.jms.TextMessage;\nimport javax.jms.JMSException;\nimport java.math.BigDecimal;\n\n\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"jms/topic/ProductUpdates\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\")\n})\npublic class PriceChangeNotifierMDB implements MessageListener {\n\n    private static final BigDecimal PRICE_CHANGE_ALERT_PERCENTAGE = new BigDecimal(\"0.10\");\n\n    @Inject\n    private ProductService productService; // Assumed defined and injectable\n\n    public void onMessage(Message rcvMessage) {\n        TextMessage msg;\n        try {\n            if (rcvMessage instanceof TextMessage) {\n                msg = (TextMessage) rcvMessage;\n                String eventStr = msg.getText();\n                String productId = \"sampleProductId\"; \n                BigDecimal newPrice = new BigDecimal(\"120.00\"); \n\n\n                BigDecimal oldPrice = productService.getCurrentPrice(productId);\n                BigDecimal priceDifference = newPrice.subtract(oldPrice).abs();\n                BigDecimal percentageChange = priceDifference.divide(oldPrice, 4, BigDecimal.ROUND_HALF_UP);\n\n                if (percentageChange.compareTo(PRICE_CHANGE_ALERT_PERCENTAGE) > 0) {\n                    System.out.println(\"ALERT: Price for item \" + productId +\n                                       \" changed significantly from \" + oldPrice + \" to \" + newPrice);\n                    productService.logPriceChangeAlert(productId, oldPrice, newPrice);\n                }\n            }\n        } catch (JMSException jmse) {\n            System.err.println(\"PriceChangeNotifierMDB: JMSException: \" + jmse.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"PriceChangeNotifierMDB: Exception: \" + e.getMessage());\n        }\n    }\n}\n\n"
        }
      ],
      "after": [
        {
          "uri": "file://PriceChangeAlertConsumer.java",
          "content": "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\nimport jakarta.transaction.Transactional;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport java.math.BigDecimal;\n\n@ApplicationScoped\npublic class PriceChangeAlertConsumer {\n\n    private static final BigDecimal PRICE_CHANGE_ALERT_PERCENTAGE = new BigDecimal(\"0.10\");\n\n    @Inject\n    ProductService productService; \n\n    @Incoming(\"product-updates-channel\")\n    @Transactional\n    public void processPriceUpdate(ProductUpdateEvent event) { /\n        System.out.println(\"Quarkus received product update for: \" + event.getProductId());\n        BigDecimal oldPrice = productService.getCurrentPrice(event.getProductId());\n\n        if (oldPrice == null || oldPrice.compareTo(BigDecimal.ZERO) == 0) {\n             System.err.println(\"Quarkus: Old price not found or zero for \" + event.getProductId() + \", cannot calculate change.\");\n             return;\n        }\n\n        BigDecimal priceDifference = event.getNewPrice().subtract(oldPrice).abs();\n        BigDecimal percentageChange = priceDifference.divide(oldPrice, 4, BigDecimal.ROUND_HALF_UP);\n\n        if (percentageChange.compareTo(PRICE_CHANGE_ALERT_PERCENTAGE) > 0) {\n            System.out.println(\"QUARKUS_ALERT: Price for item \" + event.getProductId() +\n                               \" changed significantly from \" + oldPrice + \" to \" + event.getNewPrice());\n            productService.logPriceChangeAlert(event.getProductId(), oldPrice, event.getNewPrice());\n        }\n    }\n}\n\n"
        }
      ],
      "reasoning": null,
      "used_hint_ids": null
    }
  },
  {
    "name": "get_success_rate",
    "args": {
      "violation_ids": [
        {
          "ruleset_name": "default",
          "violation_name": "jms-to-smallrye-0001"
        }
      ]
    }
  },
  {
    "name": "accept_file",
    "args": {
      "client_id": "a",
      "solution_file": {
        "uri": "file://PriceChangeAlertConsumer.java",
        "content": "import jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\nimport jakarta.transaction.Transactional;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport java.math.BigDecimal;\n\n@ApplicationScoped\npublic class PriceChangeAlertConsumer {\n\n    private static final BigDecimal PRICE_CHANGE_ALERT_PERCENTAGE = new BigDecimal(\"0.10\");\n\n    @Inject\n    ProductService productService; \n\n    @Incoming(\"product-updates-channel\")\n    @Transactional\n    public void processPriceUpdate(ProductUpdateEvent event) { /\n        System.out.println(\"Quarkus received product update for: \" + event.getProductId());\n        BigDecimal oldPrice = productService.getCurrentPrice(event.getProductId());\n\n        if (oldPrice == null || oldPrice.compareTo(BigDecimal.ZERO) == 0) {\n             System.err.println(\"Quarkus: Old price not found or zero for \" + event.getProductId() + \", cannot calculate change.\");\n             return;\n        }\n\n        BigDecimal priceDifference = event.getNewPrice().subtract(oldPrice).abs();\n        BigDecimal percentageChange = priceDifference.divide(oldPrice, 4, BigDecimal.ROUND_HALF_UP);\n\n        if (percentageChange.compareTo(PRICE_CHANGE_ALERT_PERCENTAGE) > 0) {\n            System.out.println(\"QUARKUS_ALERT: Price for item \" + event.getProductId() +\n                               \" changed significantly from \" + oldPrice + \" to \" + event.getNewPrice());\n            productService.logPriceChangeAlert(event.getProductId(), oldPrice, event.getNewPrice());\n        }\n    }\n}\n\n"
      }
    }
  },
  {
    "name": "get_success_rate",
    "args": {
      "violation_ids": [
        {
          "ruleset_name": "default",
          "violation_name": "jms-to-smallrye-0001"
        }
      ]
    }
  },
  {
    "name": "reject_file",
    "args": {
      "client_id": "a",
      "file_uri": "file://PriceChangeAlertConsumer.java"
    }
  },
  {
    "name": "get_success_rate",
    "args": {
      "violation_ids": [
        {
          "ruleset_name": "default",
          "violation_name": "jms-to-smallrye-0001"
        }
      ]
    }
  }
]
